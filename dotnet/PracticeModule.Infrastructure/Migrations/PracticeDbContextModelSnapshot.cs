// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PracticeModule.Infrastructure;

#nullable disable

namespace PracticeModule.Infrastructure.Migrations
{
    [DbContext(typeof(PracticeDbContext))]
    partial class PracticeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PracticeModule.Domain.Entity.GlobalPractice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicsPatternDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiaryPatternDocumentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PracticeType")
                        .HasColumnType("integer");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StreamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GlobalPractice");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.Practice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GlobalPracticeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Mark")
                        .HasColumnType("integer");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GlobalPracticeId");

                    b.ToTable("Practice");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.PracticeDiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PracticeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PracticeId")
                        .IsUnique();

                    b.ToTable("PracticeDiary");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.PracticeDiaryComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DiaryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId");

                    b.ToTable("PracticeDiaryComment");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.StudentPracticeCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PracticeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PracticeId")
                        .IsUnique();

                    b.ToTable("StudentPracticeCharacteristic");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.StudentPracticeCharacteristicComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PracticeCharacteristicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PracticeCharacteristicId");

                    b.ToTable("StudentPracticeCharacteristicComment");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.Practice", b =>
                {
                    b.HasOne("PracticeModule.Domain.Entity.GlobalPractice", "GlobalPractice")
                        .WithMany("Practices")
                        .HasForeignKey("GlobalPracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalPractice");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.PracticeDiary", b =>
                {
                    b.HasOne("PracticeModule.Domain.Entity.Practice", "Practice")
                        .WithOne("PracticeDiary")
                        .HasForeignKey("PracticeModule.Domain.Entity.PracticeDiary", "PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practice");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.PracticeDiaryComment", b =>
                {
                    b.HasOne("PracticeModule.Domain.Entity.PracticeDiary", "Diary")
                        .WithMany("Comment")
                        .HasForeignKey("DiaryId");

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.StudentPracticeCharacteristic", b =>
                {
                    b.HasOne("PracticeModule.Domain.Entity.Practice", "Practice")
                        .WithOne("StudentPracticeCharacteristics")
                        .HasForeignKey("PracticeModule.Domain.Entity.StudentPracticeCharacteristic", "PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practice");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.StudentPracticeCharacteristicComment", b =>
                {
                    b.HasOne("PracticeModule.Domain.Entity.StudentPracticeCharacteristic", "PracticeCharacteristic")
                        .WithMany("PracticeComment")
                        .HasForeignKey("PracticeCharacteristicId");

                    b.Navigation("PracticeCharacteristic");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.GlobalPractice", b =>
                {
                    b.Navigation("Practices");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.Practice", b =>
                {
                    b.Navigation("PracticeDiary");

                    b.Navigation("StudentPracticeCharacteristics");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.PracticeDiary", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("PracticeModule.Domain.Entity.StudentPracticeCharacteristic", b =>
                {
                    b.Navigation("PracticeComment");
                });
#pragma warning restore 612, 618
        }
    }
}

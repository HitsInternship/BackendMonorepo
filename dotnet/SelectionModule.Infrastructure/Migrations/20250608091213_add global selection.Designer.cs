// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SelectionModule.Infrastructure;

#nullable disable

namespace SelectionModule.Infrastructure.Migrations
{
    [DbContext(typeof(SelectionDbContext))]
    [Migration("20250608091213_add global selection")]
    partial class addglobalselection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SelectionModule.Domain.Entites.CandidateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.GlobalSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StreamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GlobalSelections");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.PositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.SelectionCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SelectionComments");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.SelectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DeadLine")
                        .HasColumnType("date");

                    b.Property<Guid>("GlobalSelectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("Offer")
                        .HasColumnType("uuid");

                    b.Property<int>("SelectionStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("GlobalSelectionId");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyResponseCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("VacancyResponseComments");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyResponseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyResponseEntity");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.SelectionCommentEntity", b =>
                {
                    b.HasOne("SelectionModule.Domain.Entites.SelectionEntity", "Selection")
                        .WithMany("Comments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Selection");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.SelectionEntity", b =>
                {
                    b.HasOne("SelectionModule.Domain.Entites.CandidateEntity", "Candidate")
                        .WithOne("Selection")
                        .HasForeignKey("SelectionModule.Domain.Entites.SelectionEntity", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SelectionModule.Domain.Entites.GlobalSelection", "GlobalSelection")
                        .WithMany("Selections")
                        .HasForeignKey("GlobalSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("GlobalSelection");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyEntity", b =>
                {
                    b.HasOne("SelectionModule.Domain.Entites.PositionEntity", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyResponseCommentEntity", b =>
                {
                    b.HasOne("SelectionModule.Domain.Entites.VacancyResponseEntity", "VacancyResponse")
                        .WithMany("Comments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VacancyResponse");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyResponseEntity", b =>
                {
                    b.HasOne("SelectionModule.Domain.Entites.CandidateEntity", "Candidate")
                        .WithMany("Responses")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SelectionModule.Domain.Entites.VacancyEntity", "Vacancy")
                        .WithMany("Responses")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.CandidateEntity", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Selection");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.GlobalSelection", b =>
                {
                    b.Navigation("Selections");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.SelectionEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyEntity", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SelectionModule.Domain.Entites.VacancyResponseEntity", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}

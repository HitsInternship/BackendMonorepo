services:
  web:
    build:
      context: .
      dockerfile: dotnet/HitsInternship.Api/Dockerfile
    environment:
      ConnectionStrings__HitsInternship: Server=db;Port=5434;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      Kafka__BootstrapServers: kafka:29094
      ASPNETCORE_ENVIRONMENT: Testing
    ports:
      - "1011:1011"
    networks:
      - network
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
  
  db:
    image: postgres:latest
    container_name: postgres
    expose:
      - "5434"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "7000:7000"
      - "7001:7001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    networks:
      - network

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "1235:80"
    networks:
      - network
    depends_on:
      db:
        condition: service_healthy
        
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: 3456
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "3456:3456"
    networks:
      - network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:3456
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29094,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8086:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:3456
    networks:
      - network
  
  notification-service:
    build:
      context: .
      dockerfile: java/Dockerfile
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29094
    ports:
      - "5678:5678"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  minio_data:
  pgdata:
